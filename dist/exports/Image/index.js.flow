/**
 * Copyright (c) Nicolas Gallagher.
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 */
import type { ImageSource, LoadRequest } from '../../modules/ImageLoader';
import type { ImageProps } from './types';
import * as React from 'react';
import createElement from '../createElement';
import { getAssetByID } from '../../modules/AssetRegistry';
import { createBoxShadowValue } from '../StyleSheet/preprocess';
import ImageLoader from '../../modules/ImageLoader';
import PixelRatio from '../PixelRatio';
import StyleSheet from '../StyleSheet';
import TextAncestorContext from '../Text/TextAncestorContext';
import View from '../View';
export type { ImageProps };
const ERRORED = 'ERRORED';
const LOADED = 'LOADED';
const LOADING = 'LOADING';
const IDLE = 'IDLE';
let _filterId = 0;
const svgDataUriPattern = /^(data:image\/svg\+xml;utf8,)(.*)/;
declare function createTintColorSVG(tintColor: any, id: any): any;
declare function getFlatStyle(style: any, blurRadius: any, filterId: any): any;
declare function resolveAssetDimensions(source: any): any;
declare function resolveAssetUri(source: any): ?string;
declare function raiseOnErrorEvent(uri: any, arg1: any): any;
declare function hasSourceDiff(a: ImageSource, b: ImageSource): any;
interface ImageStatics {
  getSize: (uri: string, success: (width: number, height: number) => void, failure: () => void) => void,
  prefetch: (uri: string) => Promise<void>,
  queryCache: (uris: Array<string>) => Promise<{|
    [uri: string]: 'disk/memory'
  |}>,
}
type ImageComponent = React.AbstractComponent<ImageProps, React.ElementRef<typeof View>>;
const BaseImage: ImageComponent = React.forwardRef((props, ref) => {
  const {
    accessibilityLabel,
    blurRadius,
    defaultSource,
    draggable,
    onError,
    onLayout,
    onLoad,
    onLoadEnd,
    onLoadStart,
    pointerEvents,
    source,
    style,
    ...rest
  } = props;

  if (process.env.NODE_ENV !== 'production') {
    if (props.children) {
      throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');
    }
  }

  const [state, updateState] = React.useState(IDLE);
  const [layout, updateLayout] = React.useState({});
  const hasTextAncestor = React.useContext(TextAncestorContext);
  const hiddenImageRef = React.useRef(null);
  const filterRef = React.useRef(_filterId++);
  const requestRef = React.useRef(null);
  const uri = resolveAssetUri(source);
  const isCached = uri != null && ImageLoader.has(uri);
  const shouldDisplaySource = state === LOADED || isCached || state === LOADING && defaultSource == null;
  const [flatStyle, _resizeMode, filter, tintColor] = getFlatStyle(style, blurRadius, filterRef.current);
  const resizeMode = props.resizeMode || _resizeMode || 'cover';
  const selectedSource = shouldDisplaySource ? source : defaultSource;
  const displayImageUri = resolveAssetUri(selectedSource);
  const imageSizeStyle = resolveAssetDimensions(selectedSource);
  const backgroundImage = displayImageUri ? `url("${displayImageUri}")` : null;
  const backgroundSize = getBackgroundSize(); // Accessibility image allows users to trigger the browser's image context menu

  const hiddenImage = displayImageUri ? createElement('img', {
    alt: accessibilityLabel || '',
    style: styles.accessibilityImage$raw,
    draggable: draggable || false,
    ref: hiddenImageRef,
    src: displayImageUri
  }) : null;
  declare function getBackgroundSize(): ?string;
  declare function handleLayout(e: any): any; // Image loading

  React.useEffect(() => {
    abortPendingRequest();

    if (uri != null) {
      updateState(LOADING);

      if (onLoadStart) {
        onLoadStart();
      }

      requestRef.current = ImageLoader.load(uri, function load(e) {
        updateState(LOADED);

        if (onLoad) {
          onLoad(e);
        }

        if (onLoadEnd) {
          onLoadEnd();
        }
      }, function error() {
        updateState(ERRORED);
        raiseOnErrorEvent(uri, {
          onError,
          onLoadEnd
        });
      });
    }

    declare function abortPendingRequest(): any;
    return abortPendingRequest;
  }, [uri, requestRef, updateState, onError, onLoad, onLoadEnd, onLoadStart]);
  return <View {...rest} accessibilityLabel={accessibilityLabel} onLayout={handleLayout} pointerEvents={pointerEvents} ref={ref} style={[styles.root, hasTextAncestor && styles.inline, imageSizeStyle, flatStyle]}>
      <View style={[styles.image, resizeModeStyles[resizeMode], {
      backgroundImage,
      filter
    }, backgroundSize != null && {
      backgroundSize
    }]} suppressHydrationWarning={true} />
      {hiddenImage}
      {createTintColorSVG(tintColor, filterRef.current)}
    </View>;
});
BaseImage.displayName = 'Image';
/**
 * This component handles specifically loading an image source with headers
 * default source is never loaded using headers
 */

const ImageWithHeaders: ImageComponent = React.forwardRef((props, ref) => {
  // $FlowIgnore: This component would only be rendered when `source` matches `ImageSource`
  const nextSource: ImageSource = props.source;
  const [blobUri, setBlobUri] = React.useState('');
  const request = React.useRef<LoadRequest>({
    cancel: () => {},
    source: {
      uri: '',
      headers: {}
    },
    promise: Promise.resolve('')
  });
  const {
    onError,
    onLoadStart,
    onLoadEnd
  } = props;
  React.useEffect(() => {
    if (!hasSourceDiff(nextSource, request.current.source)) {
      return;
    } // When source changes we want to clean up any old/running requests


    request.current.cancel();

    if (onLoadStart) {
      onLoadStart();
    } // Store a ref for the current load request so we know what's the last loaded source,
    // and so we can cancel it if a different source is passed through props


    request.current = ImageLoader.loadWithHeaders(nextSource);
    request.current.promise.then(uri => setBlobUri(uri)).catch(() => raiseOnErrorEvent(request.current.source.uri, {
      onError,
      onLoadEnd
    }));
  }, [nextSource, onLoadStart, onError, onLoadEnd]); // Cancel any request on unmount

  React.useEffect(() => request.current.cancel, []);
  const propsToPass = { ...props,
    // `onLoadStart` is called from the current component
    // We skip passing it down to prevent BaseImage raising it a 2nd time
    onLoadStart: undefined,
    // Until the current component resolves the request (using headers)
    // we skip forwarding the source so the base component doesn't attempt
    // to load the original source
    source: blobUri ? { ...nextSource,
      uri: blobUri
    } : undefined
  };
  return <BaseImage ref={ref} {...propsToPass} />;
}); // $FlowIgnore: This is the correct type, but casting makes it unhappy since the variables aren't defined yet

const ImageWithStatics: ImageComponent & ImageStatics = React.forwardRef((props, ref) => {
  if (props.source && props.source.headers) {
    return <ImageWithHeaders ref={ref} {...props} />;
  }

  return <BaseImage ref={ref} {...props} />;
});

ImageWithStatics.getSize = function (uri, success, failure) {
  ImageLoader.getSize(uri, success, failure);
};

ImageWithStatics.prefetch = function (uri) {
  return ImageLoader.prefetch(uri);
};

ImageWithStatics.queryCache = function (uris) {
  return ImageLoader.queryCache(uris);
};

const styles = StyleSheet.create({
  root: {
    flexBasis: 'auto',
    overflow: 'hidden',
    zIndex: 0
  },
  inline: {
    display: 'inline-flex'
  },
  image: { ...StyleSheet.absoluteFillObject,
    backgroundColor: 'transparent',
    backgroundPosition: 'center',
    backgroundRepeat: 'no-repeat',
    backgroundSize: 'cover',
    height: '100%',
    width: '100%',
    zIndex: -1
  },
  accessibilityImage$raw: { ...StyleSheet.absoluteFillObject,
    height: '100%',
    opacity: 0,
    width: '100%',
    zIndex: -1
  }
});
const resizeModeStyles = StyleSheet.create({
  center: {
    backgroundSize: 'auto'
  },
  contain: {
    backgroundSize: 'contain'
  },
  cover: {
    backgroundSize: 'cover'
  },
  none: {
    backgroundPosition: '0',
    backgroundSize: 'auto'
  },
  repeat: {
    backgroundPosition: '0',
    backgroundRepeat: 'repeat',
    backgroundSize: 'auto'
  },
  stretch: {
    backgroundSize: '100% 100%'
  }
});
export default ImageWithStatics;